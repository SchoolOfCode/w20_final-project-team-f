{"ast":null,"code":"var _jsxFileName = \"/Users/alinasavin/Documents/school-of-code/w20_final-project-team-f/nutri-glow/src/pages/Recipes.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport CuisineDropdown from '../components/CuisineDropdown/CuisineDropdown';\nimport RecipeDropdown from '../components/RecipeDropdown/RecipeDropdown';\nimport RecipeFormButton from '../components/RecipeFormButton/RecipeFormButton';\nimport './Recipes.scss';\nimport RecipeCard from '../components/RecipeCard/RecipeCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet MealType = ['Breakfast', 'Lunch', 'Dinner', 'Snack'];\nlet DietLabel = ['balanced', 'high-fiber', 'high-protein', 'low-carb', 'low-fat', 'low-sodium'];\nlet DietType = ['vegan', 'vegetarian', 'pescatarian', 'paleo', 'kosher'];\nexport default function Recipes(props) {\n  _s();\n\n  const APP_ID = '143e5a61';\n  const APP_KEY = '1aba1110ee2c42dcaaeccce62c1f3e22'; // state that holds the recipes fetched data\n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState(''); //submit selection after clicking the button\n\n  const [query, setQuery] = useState('');\n  useEffect(() => {\n    getRecipes();\n  }, []); // async function to get API data\n\n  const getRecipes = async () => {\n    const response = await fetch(`https://api.edamam.com/api/recipes/v2?type=public&q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}&diet=${dietLabel}&health=${healthLabel}&health=${dietType}&cuisineType=${cuisines}&mealType=${mealType}` // `https://api.edamam.com/api/recipes/v2?type=public&q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n    );\n    const recipeData = await response.json(); // all data is saved in the state\n\n    setRecipes(recipeData.hits);\n  };\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  };\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Recipes\", /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: getSearch,\n        className: \"searchForm\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"searchBar\",\n          type: \"text\",\n          placeholder: \"type ingredient\",\n          value: search,\n          onChange: updateSearch\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"searchButton\",\n          type: \"submit\",\n          children: \"Get recipes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: MealType.map((type, index) => /*#__PURE__*/_jsxDEV(RecipeFormButton, {\n        text: type,\n        value: type,\n        getValue: props.updateMealType\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: DietLabel.map((label, index) => /*#__PURE__*/_jsxDEV(RecipeFormButton, {\n        text: label,\n        value: label,\n        getValue: props.updateDietLabel\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: DietType.map((diet, index) => /*#__PURE__*/_jsxDEV(RecipeFormButton, {\n        text: diet,\n        value: diet,\n        getValue: props.updateDietType\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(RecipeDropdown, {\n        handleChange: props.updateHealthLabel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CuisineDropdown, {\n        handleChange: props.updateCuisine\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), recipes.map(recipe => /*#__PURE__*/_jsxDEV(RecipeCard, {\n      title: recipe.recipe.label,\n      calories: recipe.recipe.calories.toFixed(),\n      image: recipe.recipe.image,\n      ingredients: recipe.recipe.ingredients\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Recipes, \"CIiL6VVQqR7BFDfhtc6B2fy4T1M=\");\n\n_c = Recipes;\n\nvar _c;\n\n$RefreshReg$(_c, \"Recipes\");","map":{"version":3,"sources":["/Users/alinasavin/Documents/school-of-code/w20_final-project-team-f/nutri-glow/src/pages/Recipes.js"],"names":["React","CuisineDropdown","RecipeDropdown","RecipeFormButton","RecipeCard","MealType","DietLabel","DietType","Recipes","props","APP_ID","APP_KEY","recipes","setRecipes","useState","search","setSearch","query","setQuery","useEffect","getRecipes","response","fetch","dietLabel","healthLabel","dietType","cuisines","mealType","recipeData","json","hits","updateSearch","e","target","value","getSearch","preventDefault","map","type","index","updateMealType","label","updateDietLabel","diet","updateDietType","updateHealthLabel","updateCuisine","recipe","calories","toFixed","image","ingredients"],"mappings":"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","sourcesContent":["import React from 'react';\nimport CuisineDropdown from '../components/CuisineDropdown/CuisineDropdown';\nimport RecipeDropdown from '../components/RecipeDropdown/RecipeDropdown';\nimport RecipeFormButton from '../components/RecipeFormButton/RecipeFormButton';\nimport './Recipes.scss';\nimport RecipeCard from '../components/RecipeCard/RecipeCard';\n\nlet MealType = ['Breakfast', 'Lunch', 'Dinner', 'Snack'];\nlet DietLabel = [\n  'balanced',\n  'high-fiber',\n  'high-protein',\n  'low-carb',\n  'low-fat',\n  'low-sodium',\n];\n\nlet DietType = ['vegan', 'vegetarian', 'pescatarian', 'paleo', 'kosher'];\n\nexport default function Recipes(props) {\n  const APP_ID = '143e5a61';\n  const APP_KEY = '1aba1110ee2c42dcaaeccce62c1f3e22';\n\n  // state that holds the recipes fetched data\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState('');\n  //submit selection after clicking the button\n  const [query, setQuery] = useState('');\n\n  useEffect(() => {\n    getRecipes();\n  }, []);\n\n  // async function to get API data\n  const getRecipes = async () => {\n    const response = await fetch(\n      `https://api.edamam.com/api/recipes/v2?type=public&q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}&diet=${dietLabel}&health=${healthLabel}&health=${dietType}&cuisineType=${cuisines}&mealType=${mealType}`\n      // `https://api.edamam.com/api/recipes/v2?type=public&q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n    );\n\n    const recipeData = await response.json();\n    // all data is saved in the state\n    setRecipes(recipeData.hits);\n  };\n\n  const updateSearch = (e) => {\n    setSearch(e.target.value);\n  };\n\n  const getSearch = (e) => {\n    e.preventDefault();\n    setQuery(search);\n  };\n  return (\n    <div>\n      Recipes\n      <div>\n        <form onSubmit={getSearch} className=\"searchForm\">\n          <input\n            className=\"searchBar\"\n            type=\"text\"\n            placeholder=\"type ingredient\"\n            value={search}\n            onChange={updateSearch}\n          ></input>\n          <button className=\"searchButton\" type=\"submit\">\n            Get recipes\n          </button>\n        </form>\n      </div>\n      <div>\n        {MealType.map((type, index) => (\n          <RecipeFormButton\n            text={type}\n            value={type}\n            getValue={props.updateMealType}\n            key={index}\n          />\n        ))}\n      </div>\n      <div>\n        {DietLabel.map((label, index) => (\n          <RecipeFormButton\n            text={label}\n            value={label}\n            getValue={props.updateDietLabel}\n            key={index}\n          />\n        ))}\n      </div>\n      <div>\n        {DietType.map((diet, index) => (\n          <RecipeFormButton\n            text={diet}\n            value={diet}\n            getValue={props.updateDietType}\n            key={index}\n          />\n        ))}\n      </div>\n      <div>\n        <RecipeDropdown handleChange={props.updateHealthLabel} />\n        <CuisineDropdown handleChange={props.updateCuisine} />\n      </div>\n      {/* //map over the recipes generated */}\n      {recipes.map((recipe) => (\n        <RecipeCard\n          title={recipe.recipe.label}\n          calories={recipe.recipe.calories.toFixed()}\n          image={recipe.recipe.image}\n          ingredients={recipe.recipe.ingredients}\n        />\n      ))}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}